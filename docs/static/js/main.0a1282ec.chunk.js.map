{"version":3,"sources":["pythonCode.js","components/MatrixMultiplication.js","App.js","reportWebVitals.js","index.js"],"names":["dotProductExerciseCode","maxNumberOfColumns","maxNumberOfRows","pyodide","code","runPythonAsync","results","m","globals","get","n","p","A","toJs","map","x","Array","from","B","C","MatrixMultiplication","props","generateExercise","state","generateDotProductExercise","then","result","setState","answer","row","col","hasExercise","console","log","catch","error","handleSubmit","event","preventDefault","this","classes","Container","maxWidth","Paper","className","paper","onSubmit","TextField","parameter","type","value","label","Button","variant","color","button","exercise","Typography","JSON","stringify","Component","withStyles","theme","height","margin","spacing","float","width","display","flexDirection","alignItems","App","version","window","loadPyodide","indexURL","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.0a1282ec.chunk.js","sourcesContent":["function dotProductExerciseCode(maxNumberOfColumns, maxNumberOfRows) {\r\n    return `\r\n  import random\r\n  import numpy as np\r\n  # Generate random row and column sizes.\r\n  m = random.randint(1, ${maxNumberOfRows})\r\n  n = random.randint(1, ${maxNumberOfColumns})\r\n  p = random.randint(1, ${maxNumberOfColumns})\r\n  # Generate the random matrices and calculate the dot product.\r\n  rng = np.random.default_rng()\r\n  A = rng.integers(low=-10, high=10, size=(m, n), dtype=np.int32)\r\n  B = rng.integers(low=-10, high=10, size=(n, p), dtype=np.int32)\r\n  C = A @ B\r\n  `\r\n  }\r\n\r\n  export async function generateDotProductExercise(pyodide, maxNumberOfRows, maxNumberOfColumns) {\r\n    const code = dotProductExerciseCode(maxNumberOfRows, maxNumberOfColumns)\r\n    await pyodide.runPythonAsync(code)\r\n    const results = {\r\n      m: pyodide.globals.get('m'),\r\n      n: pyodide.globals.get('n'),\r\n      p: pyodide.globals.get('p'),\r\n      A: pyodide.globals\r\n        .get('A')\r\n        .toJs()\r\n        .map((x) => Array.from(x)),\r\n      B: pyodide.globals\r\n        .get('B')\r\n        .toJs()\r\n        .map((x) => Array.from(x)),\r\n      C: pyodide.globals\r\n        .get('C')\r\n        .toJs()\r\n        .map((x) => Array.from(x))\r\n    }\r\n    return results\r\n  }","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport PropTypes from 'prop-types'\r\nimport Container from '@material-ui/core/Container'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { generateDotProductExercise } from '../pythonCode'\r\nconst styles = (theme) => ({\r\n  paper: {\r\n    height: '100vh'\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1, 1, 0, 0),\r\n    float: 'right'\r\n  },\r\n  parameter: {\r\n    width: '12ch',\r\n    margin: theme.spacing(1)\r\n  },\r\n  exercise: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center'\r\n  }\r\n})\r\nclass MatrixMultiplication extends Component {\r\n  constructor(props) {\r\n    super(props)\r\nthis.state = {\r\n      pyodide: props.pyodide,\r\n      maxNumberOfRows: 4,\r\n      maxNumberOfColumns: 4,\r\n      hasExercise: false,\r\n      m: 1,\r\n      n: 1,\r\n      p: 1,\r\n      A: [[0]],\r\n      B: [[0]],\r\n      C: [[0]]\r\n    }\r\n  }\r\ngenerateExercise = () => {\r\n    const { maxNumberOfRows, maxNumberOfColumns, pyodide } = this.state\r\n    generateDotProductExercise(pyodide, maxNumberOfRows, maxNumberOfColumns)\r\n      .then((result) => {\r\n        this.setState({\r\n          ...result,\r\n          answer: result.C.map((row) => row.map((col) => '')),\r\n          hasExercise: true\r\n        })\r\n        console.log(result)\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }\r\nhandleSubmit = (event) => {\r\n    event.preventDefault()\r\n    this.generateExercise()\r\n  }\r\nrender() {\r\n    const { maxNumberOfRows, maxNumberOfColumns, A, B, C } = this.state\r\n    const { classes } = this.props\r\nreturn (\r\n      <Container maxWidth=\"sm\">\r\n        <Paper className={classes.paper}>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <TextField className={classes.parameter} type=\"number\" value={maxNumberOfRows} label=\"Max Rows\" />\r\n            <TextField className={classes.parameter} type=\"number\" value={maxNumberOfColumns} label=\"Max Columns\" />\r\n            <Button type=\"submit\" variant=\"outlined\" color=\"primary\" className={classes.button}>\r\n              New Exercise\r\n            </Button>\r\n          </form>\r\n          <div className={classes.exercise}>\r\n              <Typography variant=\"body1\">\r\n                  {JSON.stringify(A)} * {JSON.stringify(B)} = {JSON.stringify(C)}\r\n              </Typography>\r\n          </div>\r\n        </Paper>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\nMatrixMultiplication.propTypes = {\r\n  classes: PropTypes.object,\r\n  pyodide: PropTypes.object\r\n}\r\nexport default withStyles(styles)(MatrixMultiplication)","import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\nimport MatrixMultiplication from './components/MatrixMultiplication'\nconst styles = (theme) => ({\n  message: {\n    margin: theme.spacing(2)\n  }\n})\nclass App extends Component {\n  constructor(props) {\n    super(props)\nthis.state = {\n      version: null,\n      pyodide: null\n    }\n  }\ncomponentDidMount() {\n    window\n      .loadPyodide({ indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.17.0/full/' })\n      .then((pyodide) => {\n        pyodide.runPythonAsync(`\nimport sys\nsys.version\n`)\n          .then((version) => {\n            this.setState({ version, pyodide })\n          })\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\nrender() {\n    const { version, pyodide } = this.state\n    const { classes } = this.props\nreturn (\n      <div className={classes.message}>\n        {version == null\n          ? <Typography variant=\"h2\">Loading Python</Typography>\n          : <MatrixMultiplication pyodide={pyodide} />\n        }\n      </div>\n    )\n  }\n}\nApp.propTypes = {\n  classes: PropTypes.object\n}\nexport default withStyles(styles)(App)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport '@fontsource/roboto'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nReactDOM.render(\n  <>\n    <CssBaseline />\n    <App />\n  </>,\n  document.getElementById('root')\n)\nreportWebVitals()"],"sourceRoot":""}